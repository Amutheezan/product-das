<%
var eventProcessorService = carbon.server.osgiService('org.wso2.carbon.event.processor.core.EventProcessorService');
var eventPublisherService = carbon.server.osgiService('org.wso2.carbon.event.publisher.core.EventPublisherService')

function getExecutionPlan(alertType){
}

function getSmsPublisher(alertType){
}

function getEmailPublisher(alertType){
}
function getDiseaseExecutionPlan(){
}

function getWaitTimeExecutionPlan(){
}

function getCurrentSetting(){
		var result=[];
		var tempExecutionPlanDiseaseAlert, tempExecutionPlanWaitTimeAlert=null;
		var tempPublisherSmsDisease, tempPublisherSmsWaitTime,tempPublisherEmailDisease, tempPublisherEmailWaitTime=null;
		var diseaseAlertLimit=1000;
		var waitTimeAlertLimit=1000;
		var initializeDisease="Update";
		var initializeWaitTime="Update";
		var emailDisease;
		var emailWaitTime;
		var smsDisease;
		var smsWaitTime;

		 try{
				 tempExecutionPlanDiseaseAlert=eventProcessorService.getActiveExecutionPlan("diseaseAlerts")
		 }catch(e){
				 initializeDisease="Initialize"
				 log.error(e.message);
		 }
		 if(isNull(tempExecutionPlanDiseaseAlert)== false){
				diseaseAlertLimit=getValue(tempExecutionPlanDiseaseAlert,"AlertLimit");
		 }

		 try{
				 tempExecutionPlanWaitTimeAlert=eventProcessorService.getActiveExecutionPlan("waitTimeAlerts")
		 }catch(e){
				 initializeWaitTime="Initialize"
				 log.error(e.message);
		 }

		if(isNull(tempExecutionPlanWaitTimeAlert)== false){
			waitTimeAlertLimit=getValue(tempExecutionPlanWaitTimeAlert,"AlertLimit");
		}
		 try{
			 tempPublisherSmsDisease=eventPublisherService.getActiveEventPublisherConfigurationContent("smsdisease")
		 }catch(e){
				 log.error(e.message);
		 }
		 if(isNull(tempPublisherSmsDisease)== false){
		   smsDisease=getValue(tempPublisherSmsDisease,"sms");
		 }
		 try{
			 tempPublisherSmsWaitTime=eventPublisherService.getActiveEventPublisherConfigurationContent("smswaitTime")
		 }catch(e){
				 log.error(e.message);
		 }
		 if(isNull(tempPublisherSmsWaitTime)== false){
				smsWaitTime=getValue(tempPublisherSmsWaitTime,"sms");
		 }
		 try{
			 tempPublisherEmailDisease=eventPublisherService.getActiveEventPublisherConfigurationContent("emaildisease")
		 }catch(e){
				 log.error(e.message);
		 }
		 if(isNull(tempPublisherEmailDisease)== false){
				emailDisease=getValue(tempPublisherEmailDisease,"email");
		 }
		 try{
			 tempPublisherEmailWaitTime=eventPublisherService.getActiveEventPublisherConfigurationContent("emailwaitTime")
		 }catch(e){
				 log.error(e.message);
		 }
		 if(isNull(tempPublisherEmailWaitTime)== false){
				emailWaitTime=getValue(tempPublisherEmailWaitTime,"email");
		 }

		if(emailDisease == "null"){
		 emailDisease="";
		}
		if(emailWaitTime == "null"){
		 emailWaitTime="";
		}
		if(smsDisease == "null"){
		 smsDisease="";
		}
		if(smsWaitTime == "null"){
		 smsWaitTime="";
		}

 result.push({"diseaseAlertLimit": diseaseAlertLimit,
						 "waitTimeAlertLimit": waitTimeAlertLimit,
						 "initializeDisease": initializeDisease,
						 "initializeWaitTime": initializeWaitTime,
						 "emailDisease":emailDisease,
						 "emailWaitTime":emailWaitTime,
						 "smsDisease":smsDisease,
						 "smsWaitTime":smsWaitTime
						 });
	 return result;
}

function getValue(content,requiredParameter){
var result;
	if(requiredParameter == "sms"){
		result = content.match(/<parameter name="sms.no">(.*?)<\/parameter>/g).map(function(val){
		   val= val.replace(/<\/?parameter>/g,'');
			 val=val.replace(/<\/?parameter name="sms.no">/g,'');
			 val=val.replace(' ','');
			 return val
		});
	}else if(requiredParameter == "email"){
		result = content.match(/<parameter name="email.address">(.*?)<\/parameter>/g).map(function(val){
			 val= val.replace(/<\/?parameter>/g,'');
			 val=val.replace(/<\/?parameter name="email.address">/g,'');
			 val=val.replace(' ','');
			 return val
		});
	}else if(requiredParameter == "AlertLimit"){
			content=content.split(" ");
			for(var i=0;i<content.length;i++){
			 if(content[i]==">"{
			 		result=content[i+1];
			 })
			}
	}
return result;
}
function isNull(value){
  var isNull=false;
  if(typeof value === "undefined" || value === null || value === "" || value === "null"){
    isNull=true;
  }
	if(typeof value === "undefined" || value === null || value === "" || value === "null"){
		isNull=true;
	}
  return isNull;
}

%>
