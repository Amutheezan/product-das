@Plan:name('diseaseAlerts')

@Plan:description('Disease Alerting')

@Plan:statistics('true')

@Plan:trace('true')

@Import('das_hl7_data_publisher_store:1.0.0', arbitrary.data='true')
define stream InputHl7Stream (meta_host string, meta_server_name string,
correlation_activity_id string,
content string, type string, timestamp long, message_direction string,
service_name string, operation_name string, status string, arbitraryDataMap object);

@Export('diseaseAlertStream:1.0.0')
define stream diseaseAlertStream (positionX long, positionY long, disease string,
msgCount long, timestamp long);


from InputHl7Stream
[(cast(map:get(arbitraryDataMap, 'MSH.MessageType'),'string') != 'ACK') AND
(NOT(cast(map:get(arbitraryDataMap, 'PID.PatientAddress'), 'string') is null))  AND
(NOT(cast(map:get(arbitraryDataMap, 'PID.PatientAddress[2]'), 'string') is null))  AND
(NOT(cast(map:get(arbitraryDataMap, 'PID.PatientAddress[3]'), 'string') is null))  AND
(NOT(cast(map:get(arbitraryDataMap, 'PID.PatientAddress[4]'), 'string') is null)) AND
(NOT (cast(map:get(arbitraryDataMap, 'PID.PatientAddress[5]'), 'string') is null)) AND
(NOT(cast(map:get(arbitraryDataMap, 'DG1.DiagnosisDescription'), 'string') is null)) AND
(NOT(cast(map:get(arbitraryDataMap, 'MSH.Date/TimeofMessage'),'string') is null))]
select cast(map:get(arbitraryDataMap, 'PID.PatientAddress'), 'string') as address,
cast(map:get(arbitraryDataMap, 'PID.PatientAddress[2]'), 'string') as city,
cast(map:get(arbitraryDataMap, 'PID.PatientAddress[3]'), 'string') as state,
cast(map:get(arbitraryDataMap, 'PID.PatientAddress[3]'), 'string') as zipCode,
cast(map:get(arbitraryDataMap, 'PID.PatientAddress[5]'), 'string') as country,
cast(map:get(arbitraryDataMap, 'DG1.DiagnosisDescription'), 'string') as disease ,
time:timestampInMilliseconds(cast(map:get(arbitraryDataMap, 'MSH.Date/TimeofMessage'),'string'),'yyyyMMDDHHMMss.SSS') as timestamp
insert into sortedDiseaseStream;

/* TODO : we have to analyse the symptoms to figure out the disease  using NLP */

from sortedDiseaseStream
select str:concat( address,', ',city,', ',state,' ',zipCode,', ',country) as location,disease,timestamp
insert into locationDiseaseStream;

from locationDiseaseStream#geo:geocode(location)
select latitude, longitude,formattedAddress,disease,timestamp
insert into latlongDiseaseStream;

/* positionX and positionY should be something reasonable value */

from latlongDiseaseStream
select math:round(latitude) as positionX,
math:round(longitude)  as positionY,disease,timestamp
insert into pointDiseaseLocationStream;

/* TODO : we need to configure to have the snapshot data */

from pointDiseaseLocationStream#window.time(7 day)
select positionX,positionY, disease, count(*) as msgCount, timestamp
group by positionX,positionY, disease
insert into pointDiseaseCountStream;

from pointDiseaseCountStream[msgCount > $limit ]
select *
insert into diseaseAlertStream;
