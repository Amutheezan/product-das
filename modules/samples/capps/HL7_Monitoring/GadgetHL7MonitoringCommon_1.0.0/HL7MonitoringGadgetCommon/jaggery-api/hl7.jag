<%

(function () {
	var TYPE = "type";
	var CONTENT_TYPE_JSON = "application/json";
	var AUTHORIZATION_HEADER = "Authorization";
	var USER_TOKEN = "user";
	var USERNAME = "username";
	var DOMAIN = "domain";
	var HTTP_USER_NOT_AUTHENTICATED = 403;
	var HTTP_INTERNAL_ERROR = 500;
	var log = new Log();
	var carbon = require('carbon');
	var configs = require('/configs/designer.json');
	var utils = require('/modules/utils.js');
	var server = new carbon.server.Server();
	var eventProcessorService = carbon.server.osgiService('org.wso2.carbon.event.processor.core.EventProcessorService');
	var eventPublisherService = carbon.server.osgiService('org.wso2.carbon.event.publisher.core.EventPublisherService');
	var hl7Utils=require('hl7-utils.jag');
	var timeRangeUtil = Packages.org.wso2.analytics.esb.util.TimeRangeUtils;
	var timeRange = Packages.org.wso2.analytics.esb.bean.TimeRange;
	var JSUtils = Packages.org.wso2.carbon.analytics.jsservice.Utils;
	var AnalyticsCachedJSServiceConnector = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector;
	var AnalyticsCache = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector.AnalyticsCache;
	var cacheTimeoutSeconds = 5;
	var loggedInUser = null;
	var tenantId = -1;
	var superTenantId = -1234;


	var SUMMARY_CHART=1;
	var SEARCH_TABLE=2;
	var SEARCH_SPECIFIC_MESSAGE=20;
	var NOTIFY_DISEASE=3;
	var NOTIFY_WAIT_TIME=30;
  var UPDATE_ALERT=31;
	var CURRENT_SETTING=32;



	if (configs.cacheTimeoutSeconds) {
		cacheTimeoutSeconds = parseInt(configs.cacheTimeoutSeconds);
	}
	var cacheSizeBytes = 1024 * 1024 * 1024;
	if (configs.cacheSizeBytes) {
		cacheSizeBytes = parseInt(configs.cacheSizeBytes);
	}

	response.contentType = CONTENT_TYPE_JSON;

	var authParam = request.getHeader(AUTHORIZATION_HEADER);
	if (authParam != null) {
		credentials = JSUtils.authenticate(authParam);
		loggedInUser = credentials[0];
	} else {
		var token = session.get(USER_TOKEN);
		if (token != null) {
			loggedInUser = token[USERNAME] + "@" + token[DOMAIN] ;
		} else {
			log.error("user is not authenticated!");
			response.status = HTTP_USER_NOT_AUTHENTICATED;
			print('{ "status": "Failed", "message": "User is not authenticated." }');
			return;
		}
	}
	var user = carbon.server.tenantUser(loggedInUser);
	tenantId = user.tenantId;

	var cache = application.get("AnalyticsWebServiceCache");
	if (cache == null) {
		cache = new AnalyticsCache(cacheTimeoutSeconds, cacheSizeBytes);
		application.put("AnalyticsWebServiceCache", cache);
	}

	var connector = new AnalyticsCachedJSServiceConnector(cache);

	var type = 0;
	var typeParam = request.getParameter(TYPE);
	if (typeParam != null) {
		type = parseInt(typeParam);
	}
	if (type == 0) {
		log.error("operation type is not specified!");
		response.status = HTTP_INTERNAL_ERROR;
		print('{ "status": "Failed", "message": "Operation type is not specified" }');
		return;
	}

	var content = request.getContent();
	if (content != '' && content != null) {
		if (log.isDebugEnabled()) {
			log.debug("value of content: " + stringify(contentAsString));
		}
	}

	if (connector != null && loggedInUser != null) {
	var result = [];
	var temp=[];
	var query = null;
	var resp = null;
		switch(type){
			case SUMMARY_CHART:
			{
				var timeFrom = request.getParameter("timeFrom");
				var timeTo = request.getParameter("timeTo");
				var msgType = request.getParameter("msgType");
				var tableSuffix = request.getParameter("suf");
				var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);
				if(tableSuffix != "ALL"){
					tableSuffix ="";
				}
				var tableName = "DAS_HL7_DATA_PUBLISHER_STORE_PER" + timeUnit + tableSuffix;
				timeFrom = timeRangeUtil.roundFloor(timeFrom, timeUnit);
				query = stringify({
					query: "type:" + msgType + " AND timestamp : [" + timeFrom + " TO " + timeTo + "]",
					"start": 0,
					"count": 1000
				});
				resp = connector.search(superTenantId, tableName, query);
				var dataPoints = [];
				try {
					dataPoints = JSON.parse(resp.getMessage());
				} catch (error) {
					log.error(error);
				}
				var timestamps=[]
				var count = 0;
					for (var i = 0; i < dataPoints.length; i++) {
						var obj = dataPoints[i];
						if (obj != null && obj.values != null) {
							if (obj != null) {
							result.push({
								"timestamp": obj.values.timestamp,
								"msgCount": obj.values.msgCount,
								"subtype" : obj.values.subtype
							});
							}
						}
					}
		        break;
			 }

			case SEARCH_TABLE:
			{
				var query = request.getParameter("query");
				var maxrows = request.getParameter("maxRows");
				var tableName = "DAS_HL7_DATA_PUBLISHER_STORE";
				query = stringify({
					query: query,
					"start": 0,
					"count": maxrows
				});
				resp = connector.search(superTenantId, tableName, query);
    				var count = connector.searchCount(superTenantId,  tableName, query);
    				var limit = count.getMessage();
					var dataPoints = [];
					try {
						dataPoints = JSON.parse(resp.getMessage());
					} catch (error) {
						log.error(error);
					}
					for (var i = 0; i < dataPoints.length; i++) {
						var obj = dataPoints[i];
						if (obj != null && obj.values != null) {
							if (obj != null) {
								temp.push(obj.values);
							}
						}
					}
					result.push({"draw" : 1,
					"recordsFiltered" : limit,
     		  					"recordsTotal" : limit,
     		  					"data" : temp});


				break;
			 }
			 case SEARCH_SPECIFIC_MESSAGE:
			{
				var timeFrom = request.getParameter("timeFrom");
				var timeTo = request.getParameter("timeTo");
				var querytxt = request.getParameter("query");
				var correlation_activity_id = request.getParameter("correlation_activity_id");
				var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);
				var tableName = "DAS_HL7_DATA_PUBLISHER_STORE";
				timeFrom = timeRangeUtil.roundFloor(timeFrom, timeUnit);
				query = stringify({
					query: "timestamp : [" + timeFrom + " TO " + timeTo + "] " + querytxt + "AND correlation_activity_id : " + correlation_activity_id,
					"start": 0,
					"count": 1000
				});
				resp = connector.search(superTenantId, tableName, query);
					var dataPoints = [];
					try {
						dataPoints = JSON.parse(resp.getMessage());
					} catch (error) {
						log.error(error);
					}
					for (var i = 0; i < dataPoints.length; i++) {
						var obj = dataPoints[i];
						if (obj != null && obj.values != null) {
							if (obj != null) {
								result.push(obj.values);
							}
						}
					}
				break;
			 }

			case NOTIFY_DISEASE:
			{
                                var diseaseType=request.getParameter("diseaseType");
				var tableName = "DISEASEALERTSTREAM";
				if (hl7Utils.isNull(diseaseType)){
				query = stringify({
					query: "",
					"start": 0,
					"count": 10000
				});
				}else{
				query = stringify({
					query: "disease : " + diseaseType,
					"start": 0,
					"count": 10000
				});
				}
				resp = connector.search(superTenantId, tableName, query);
    				var count = connector.searchCount(superTenantId,  tableName, query);
    				var limit = count.getMessage();
					var dataPoints = [];
					try {
						dataPoints = JSON.parse(resp.getMessage());
					} catch (error) {
						log.error(error);
					}
					for (var i = 0; i < dataPoints.length; i++) {
						var obj = dataPoints[i];
						if (obj != null && obj.values != null) {
							if (obj != null) {
								temp.push(obj.values);
							}
						}
					}
					result.push({"draw" : 1,
					"recordsFiltered" : limit,
     		  					"recordsTotal" : limit,
     		  					"data" : temp});
					break;
			 }
			case NOTIFY_WAIT_TIME:
			{
				var tableName = "WAITTIMEALERTSTREAM";
				query = stringify({
					query: "*:*",
					"start": 0,
					"count": 1000
				});
				resp = connector.search(superTenantId, tableName, query);
    				var count = connector.searchCount(superTenantId,  tableName, query);
    				var limit = count.getMessage();
					var dataPoints = [];
					try {
						dataPoints = JSON.parse(resp.getMessage());
					} catch (error) {
						log.error(error);
					}
					for (var i = 0; i < dataPoints.length; i++) {
						var obj = dataPoints[i];
						if (obj != null && obj.values != null) {
							if (obj != null) {
								temp.push(obj.values);
							}
						}
					}
					result.push({"draw" : 1,
					"recordsFiltered" : limit,
     		  					"recordsTotal" : limit,
     		  					"data" : temp});
					break;
			 }
			 case UPDATE_ALERT:
			 {
			 	var initialize="Update";
			  var alertType= request.getParameter("AlertType");
			  var limit=request.getParameter("AlertLimit");
				var email=request.getParameter("EmailAddress");
				var phoneno=request.getParameter("PhoneNo");
				var executionPlanName=alertType+"Alerts";
 			 	var smsAlertName="sms"+alertType;
 			 	var emailAlertName="email"+alertType;
 			 try{
 				eventProcessorService.undeployActiveExecutionPlan(executionPlanName);
 				initialize="Update"
 			 }catch(e){
 				initialize="Initialize"
 				log.error(e.message);
 			 }
 			 var executionPlan=hl7Utils.createExecutionPlan(alertType);
 			 executionPlan=executionPlan.split("$limit").join(limit);
 			 eventProcessorService.deployExecutionPlan(executionPlan);

			      if(hl7Utils.isNull(phoneno) == false){
					try{
					eventPublisherService.undeployActiveEventPublisherConfiguration(smsAlertName);
					initialize="Update"
				}catch(e){
					initialize="Initialize"
					log.error(e.message);
				}
				 var smsPublisher=hl7Utils.createPublisher("sms");
				 smsPublisher=smsPublisher.split("$AlertType").join(alertType);
				 smsPublisher=smsPublisher.replace("$phoneno","+"+phoneno);
				 eventPublisherService.deployEventPublisherConfiguration(smsPublisher);
				 }
				 if(hl7Utils.isNull(email) == false){
						try{
						eventPublisherService.undeployActiveEventPublisherConfiguration(emailAlertName);
						initialize="Update"
					}catch(e){
						initialize="Initialize"
						log.error(e.message);
					}
					 var emailPublisher=hl7Utils.createPublisher("email");
					 emailPublisher=emailPublisher.split("$AlertType").join(alertType);
					 emailPublisher=emailPublisher.replace("$email",email);
					 eventPublisherService.deployEventPublisherConfiguration(emailPublisher);
					 }
					 result.push({ initialize : initialize});

					 break;
					}
			 case CURRENT_SETTING:
			 {


			 var result=[];
			 var tempExecutionPlanDiseaseAlert, tempExecutionPlanWaitTimeAlert=null;
			 var tempPublisherSmsDisease, tempPublisherSmsWaitTime,tempPublisherEmailDisease, tempPublisherEmailWaitTime=null;
			 var diseaseAlertLimit=1000;
			 var waitTimeAlertLimit=1000;
			 var initializeDisease="Update";
			 var initializeWaitTime="Update";
			 var emailDisease;
			 var emailWaitTime;
			 var smsDisease;
			 var smsWaitTime;

				try{
						tempExecutionPlanDiseaseAlert=eventProcessorService.getActiveExecutionPlan("diseaseAlerts")
				}catch(e){
						initializeDisease="Initialize"
						log.error(e.message);
				}
				if(hl7Utils.isNull(tempExecutionPlanDiseaseAlert)== false){
					 diseaseAlertLimit=hl7Utils.getAlertLimit(tempExecutionPlanDiseaseAlert);
				}

				try{
						tempExecutionPlanWaitTimeAlert=eventProcessorService.getActiveExecutionPlan("waitTimeAlerts")
				}catch(e){
						initializeWaitTime="Initialize"
						log.error(e.message);
				}

			 if(hl7Utils.isNull(tempExecutionPlanWaitTimeAlert)== false){
				 waitTimeAlertLimit=hl7Utils.getAlertLimit(tempExecutionPlanWaitTimeAlert);
			 }
				try{
					tempPublisherSmsDisease=eventPublisherService.getActiveEventPublisherConfigurationContent("smsdisease")
				}catch(e){
						log.error(e.message);
				}
				if(hl7Utils.isNull(tempPublisherSmsDisease)== false){
					smsDisease=hl7Utils.getPhoneNo(tempPublisherSmsDisease);
				}
				try{
					tempPublisherSmsWaitTime=eventPublisherService.getActiveEventPublisherConfigurationContent("smswaitTime")
				}catch(e){
						log.error(e.message);
				}
				if(hl7Utils.isNull(tempPublisherSmsWaitTime)== false){
					 smsWaitTime=hl7Utils.getPhoneNo(tempPublisherSmsWaitTime);
				}
				try{
					tempPublisherEmailDisease=eventPublisherService.getActiveEventPublisherConfigurationContent("emaildisease")
				}catch(e){
						log.error(e.message);
				}
				if(hl7Utils.isNull(tempPublisherEmailDisease)== false){
					 emailDisease=hl7Utils.getEmailAddress(tempPublisherEmailDisease);
				}
				try{
					tempPublisherEmailWaitTime=eventPublisherService.getActiveEventPublisherConfigurationContent("emailwaitTime")
				}catch(e){
						log.error(e.message);
				}
				if(hl7Utils.isNull(tempPublisherEmailWaitTime)== false){
					 emailWaitTime=hl7Utils.getEmailAddress(tempPublisherEmailWaitTime);
				}

			 if(emailDisease == "null"){
				emailDisease="";
			 }
			 if(emailWaitTime == "null"){
				emailWaitTime="";
			 }
			 if(smsDisease == "null"){
				smsDisease="";
			 }
			 if(smsWaitTime == "null"){
				smsWaitTime="";
			 }

		result.push({"diseaseAlertLimit": diseaseAlertLimit,
								"waitTimeAlertLimit": waitTimeAlertLimit,
								"initializeDisease": initializeDisease,
								"initializeWaitTime": initializeWaitTime,
								"emailDisease":emailDisease,
								"emailWaitTime":emailWaitTime,
								"smsDisease":smsDisease,
								"smsWaitTime":smsWaitTime
								});
				break;
			 }

			default :
			{
				result = '{ "status": "Failed", "message": "Unidentified operation" }';
				break;
			}
		     }

			if (result != null) {
					if (log.isDebugEnabled()) {
						log.debug("value of result: " + result);
					}

						var finalResult = {
							status: "success",
							message: result
						}
					print(finalResult);
					}
		}
}());





%>
